(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{422:function(v,_,t){"use strict";t.r(_);var s=t(52),e=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"架构组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构组成"}},[v._v("#")]),v._v(" 架构组成")]),v._v(" "),t("p",[v._v("Node.js 是一个构建在 Chrome 浏览器 "),t("code",[v._v("V8 引擎")]),v._v("上的 JavaScript 运行环境， 使用 "),t("strong",[v._v("单线程")]),v._v("、"),t("strong",[v._v("事件驱动")]),v._v("、"),t("strong",[v._v("非阻塞 I/O")]),v._v(" 的方式实现了高并发请求，"),t("code",[v._v("libuv")]),v._v(" 为其提供了异步编程的能力。")]),v._v(" "),t("img",{attrs:{src:v.$withBase("/assets/nodejs.png"),alt:"foo"}}),v._v(" "),t("p",[v._v("Node.js 底层框架由 "),t("strong",[v._v("Node.js 标准库")]),v._v("、"),t("strong",[v._v("Node bindings")]),v._v("、 "),t("strong",[v._v("底层库")]),v._v("三个部分组成。")]),v._v(" "),t("h3",{attrs:{id:"node-js-标准库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js-标准库"}},[v._v("#")]),v._v(" Node.js 标准库")]),v._v(" "),t("p",[v._v("这一层是由 Javascript 编写的，也就是我们使用过程中直接能调用的 API，在源码中的 lib 目录下可以看到，诸如 "),t("code",[v._v("http")]),v._v("、"),t("code",[v._v("fs")]),v._v("、"),t("code",[v._v("events")]),v._v(" 等常用核心模块")]),v._v(" "),t("h3",{attrs:{id:"node-bindings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-bindings"}},[v._v("#")]),v._v(" Node bindings")]),v._v(" "),t("p",[v._v("这一层可以理解为是 javascript 与 C/C++ 库之间建立连接的桥， 通过这个桥，底层实现的 C/C++库暴露给 javascript 环境，同时把 "),t("code",[v._v("js 传入 V8")]),v._v(", 解析后交给 "),t("code",[v._v("libuv")]),v._v(" 发起 "),t("code",[v._v("非阻塞 I/O")]),v._v(", 并等待 "),t("code",[v._v("事件循环")]),v._v(" 调度；")]),v._v(" "),t("h3",{attrs:{id:"底层库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#底层库"}},[v._v("#")]),v._v(" 底层库")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("V8")]),v._v("： Google 推出的 Javascript 虚拟机，为 Javascript 提供了在非浏览器端运行的环境；")]),v._v(" "),t("li",[t("strong",[v._v("libuv")]),v._v("：为 Node.js 提供了跨平台，线程池，事件池，异步 I/O 等能力，是 Nodejs 之所以高效的主要原因；")]),v._v(" "),t("li",[t("strong",[v._v("C-ares")]),v._v("：提供了异步处理 DNS 相关的能力；")]),v._v(" "),t("li",[t("strong",[v._v("http_parser、OpenSSL、zlib 等")]),v._v("：提供包括 http 解析、SSL、数据压缩等能力；")])]),v._v(" "),t("h2",{attrs:{id:"io-input-output"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io-input-output"}},[v._v("#")]),v._v(" IO(input/output)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("阻塞 I/O")]),v._v("： 在发起 I/O 操作之后会一直阻塞着进程，不执行其他操作,直到得到响应或者超时为止；")]),v._v(" "),t("li",[t("strong",[v._v("非阻塞 I/O")]),v._v("：发起 I/O 操作不等得到响应或者超时就立即返回，让进程继续执行其他操作，但是要通过轮询方式不断地去 check 数据是否已准备好")]),v._v(" "),t("li",[t("strong",[v._v("多路复用 I/O")]),v._v("：又分为 select、pool、epool。最大优点就是单个进程就可以同时处理多个网络连接的 IO。基本原理就是 "),t("code",[v._v("select/poll")]),v._v(" 这个 function 会不断的轮询所负责的所有 socket，当某个 socket 有数据到达了，就通知用户进程。而 epool 通过 callback 回调通知机制.减少内存开销,不因并发量大而降低效率,linux 下最高效率的 I/O 事件机制。")]),v._v(" "),t("li",[t("strong",[v._v("同步 I/O")]),v._v("：发起 I/O 操作之后会阻塞进程直到得到响应或者超时。前三者"),t("code",[v._v("阻塞 I/O")]),v._v("，"),t("code",[v._v("非阻塞 I/O")]),v._v("，"),t("code",[v._v("多路复用 I/O")]),v._v(" 都属于同步 I/O。注意非阻塞 I/O 在数据从内核拷贝到用户进程时，进程仍然是阻塞的，所以还是属于同步 I/O。")]),v._v(" "),t("li",[t("strong",[v._v("异步 I/O")]),v._v("：直接返回继续执行下一条语句，当 I/O 操作完成或数据返回时，以事件的形式通知执行 IO 操作的进程。")])]),v._v(" "),t("h2",{attrs:{id:"koa-和-express"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#koa-和-express"}},[v._v("#")]),v._v(" Koa 和 Express")]),v._v(" "),t("ul",[t("li",[v._v("中间件模型\n"),t("ul",[t("li",[v._v("koa2 的中间件是通过 "),t("code",[v._v("async await")]),v._v(" 实现的，中间件执行顺序是 "),t("strong",[v._v("“洋葱圈”")]),v._v(" 模型，中间件之间通过 "),t("code",[v._v("next")]),v._v(" 函数联系,当一个中间件调用 "),t("code",[v._v("next()")]),v._v(" 后，会将控制权交给下一个中间件, 直到下一个中间件不再执行 "),t("code",[v._v("next()")]),v._v(" 后, 将会沿路折返,将控制权依次交换给前一个中间件。")]),v._v(" "),t("li",[v._v("express 中间件一个接一个的顺序执行, 通常会将 response 响应写在最后一个中间件中")])])]),v._v(" "),t("li",[v._v("express 自身集成了路由、视图处理等功能\n"),t("ul",[t("li",[v._v("koa 本身不集成任何中间件，需要配合路由、视图等中间件进行开发")])])]),v._v(" "),t("li",[v._v("异步流程控制\n"),t("ul",[t("li",[v._v("express 采用 "),t("code",[v._v("callback")]),v._v(" 来处理异步")]),v._v(" "),t("li",[v._v("koa v1 采用 "),t("code",[v._v("generator")])]),v._v(" "),t("li",[v._v("koa v2 采用 "),t("code",[v._v("async/await")])])])]),v._v(" "),t("li",[v._v("错误处理\n"),t("ul",[t("li",[v._v("express 使用 "),t("code",[v._v("callback")]),v._v(" 捕获异常，对于深层次的异常捕获不了")]),v._v(" "),t("li",[v._v("koa 使用 "),t("code",[v._v("try catch")]),v._v("，能更好地解决异步捕获")])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);