(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{420:function(v,_,t){"use strict";t.r(_);var s=t(52),e=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),t("ul",[t("li",[v._v("轻量级，配置方便灵活，无侵入性")]),v._v(" "),t("li",[v._v("占用内存少，启动快，性能好")]),v._v(" "),t("li",[v._v("高并发，事件驱动，异步")]),v._v(" "),t("li",[v._v("热部署，修改配置热生效")])]),v._v(" "),t("h2",{attrs:{id:"架构模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构模型"}},[v._v("#")]),v._v(" 架构模型")]),v._v(" "),t("ul",[t("li",[v._v("基于 "),t("strong",[v._v("socket 与 Linux epoll (I/O 事件通知机制)")]),v._v("，实现了 "),t("strong",[v._v("高并发")]),v._v(" "),t("ul",[t("li",[v._v("使用模块化、事件通知、回调函数、计时器、轮询实现非阻塞的异步模式")]),v._v(" "),t("li",[v._v("磁盘不足的情况，可能会导致阻塞")])])]),v._v(" "),t("li",[t("strong",[v._v("Master-worker 进程模式")]),v._v(" "),t("ul",[t("li",[v._v("Nginx 启动时会在内存中常驻一个 "),t("strong",[v._v("Master 主进程")]),v._v("，功能\n"),t("ul",[t("li",[v._v("读取配置文件")]),v._v(" "),t("li",[v._v("创建、绑定、关闭 socket")]),v._v(" "),t("li",[v._v("启动、维护、配置 worker 进程")]),v._v(" "),t("li",[v._v("编译脚本、打开日志")])])]),v._v(" "),t("li",[v._v("master 进程会开启配置数量的 "),t("strong",[v._v("worker 进程")]),v._v("，比如根据 CPU 核数等\n"),t("ul",[t("li",[v._v("利用 socket 监听连接，不会新开进程或线程，节约了创建与销毁进程的成本")]),v._v(" "),t("li",[v._v("检查网络、存储，把新连接加入到轮询队列中，异步处理")]),v._v(" "),t("li",[v._v("能有效利用 cpu 多核，并避免了线程切换和锁等待")])])])])]),v._v(" "),t("li",[t("strong",[v._v("热部署模式")]),v._v(" "),t("ul",[t("li",[v._v("当我们修改配置热重启后，master 进程会以新的配置新创建 worker 进程，新连接会全部交给新进程处理")]),v._v(" "),t("li",[v._v("老的 worker 进程会在处理完之前的连接后被 kill 掉，逐步全替换成新配置的 worker 进程")])])])]),v._v(" "),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[v._v("#")]),v._v(" 配置")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("官网下载")])]),v._v(" "),t("li",[t("p",[v._v("配置文件路径： "),t("code",[v._v("/usr/local/etc/nginx/nginx.conf")])])]),v._v(" "),t("li",[t("p",[v._v("启动: 终端输入 "),t("code",[v._v("nginx")]),v._v("，访问 "),t("code",[v._v("localhost:8080")]),v._v(" 就能看到 "),t("code",[v._v("Welcome...")])])]),v._v(" "),t("li",[t("p",[t("code",[v._v("nginx -s stop")]),v._v(": 停止服务")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("nginx -s reload")]),v._v(": 热重启服务")])]),v._v(" "),t("li",[t("p",[v._v("配置代理: "),t("code",[v._v("proxy_pass")])]),v._v(" "),t("ul",[t("li",[v._v("在配置文件中配置即可完成")])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("server {\n    listen 80;\n    location / {\n        proxy_pass http://xxx.xxx.xx.xx:3000;\n    }\n}\n")])])])])]),v._v(" "),t("h2",{attrs:{id:"常用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景"}},[v._v("#")]),v._v(" 常用场景")]),v._v(" "),t("h3",{attrs:{id:"代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[v._v("#")]),v._v(" 代理")]),v._v(" "),t("ul",[t("li",[v._v("其实 Nginx 可以算一层 "),t("strong",[v._v("代理服务器")]),v._v("，将客户端的请求处理一层后，再转发到业务服务器，这里可以分成两种类型，其实实质就是 "),t("strong",[v._v("请求的转发")]),v._v("，使用 Nginx 非常合适、高效")])]),v._v(" "),t("h3",{attrs:{id:"正向代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[v._v("#")]),v._v(" 正向代理")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("即用户通过访问这层正向代理服务器，再由代理服务器去到原始服务器请求内容后，再返回给用户")])]),v._v(" "),t("li",[t("p",[v._v("例如我们常使用的 VPN 就是一种常见的正向代理模式。通常我们无法直接访问谷歌服务器，但是通过访问一台国外的服务器，再由这台服务器去请求谷歌返回给用户，用户即可访问谷歌")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("特点")])]),v._v(" "),t("ul",[t("li",[v._v("代理服务器属于 "),t("strong",[v._v("客户端层")]),v._v("，称之为正向代理")]),v._v(" "),t("li",[v._v("代理服务器是 "),t("strong",[v._v("为用户服务")]),v._v("，对于用户是透明的，用户知道自己访问代理服务器")]),v._v(" "),t("li",[v._v("对内容服务器来说是 "),t("strong",[v._v("隐藏")]),v._v(" 的，内容服务器并无法分清访问是来自用户或者代理")])])])]),v._v(" "),t("h3",{attrs:{id:"反向代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[v._v("#")]),v._v(" 反向代理")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("用户访问头条的反向代理网关，通过网关的一层处理和调度后，再由网关将访问转发到内部的服务器上，返回内容给用户")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("特点")])]),v._v(" "),t("ul",[t("li",[v._v("代理服务器属于 "),t("strong",[v._v("服务端层")]),v._v("，因此称为反向代理。通常代理服务器与内部内容服务器会隶属于同一内网或者集群")]),v._v(" "),t("li",[v._v("代理服务器是 "),t("strong",[v._v("为内容服务器服务")]),v._v(" 的，对用户是隐藏的，用户不清楚自己访问的具体是哪台内部服务器")]),v._v(" "),t("li",[v._v("能有效保证内部服务器的 "),t("strong",[v._v("稳定与安全")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("反向代理的好处")])]),v._v(" "),t("ul",[t("li",[v._v("安全与权限\n"),t("ul",[t("li",[v._v("用户访问必须通过反向代理服务器，也就是便可以在做这层做统一的请求校验，过滤拦截不合法、危险的请求，从而就能更好的保证服务器的安全与稳定")])])]),v._v(" "),t("li",[v._v("负载均衡: 能有效分配流量，最大化集群的稳定性，保证用户的访问质量")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("负载均衡")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("负载均衡是基于反向代理下实现的一种 "),t("strong",[v._v("流量分配")]),v._v(" 功能，目的是为了达到服务器资源的充分利用，以及更快的访问响应")])]),v._v(" "),t("li",[t("p",[v._v("由于用户并不知道内部服务器中的队列情况，而反向代理服务器是清楚的，因此通过 Nginx，便能很简单地实现流量的均衡分配")])]),v._v(" "),t("li",[t("p",[v._v("Nginx 实现: "),t("code",[v._v("Upstream")]),v._v(" 模块， 这样当用户访问 "),t("code",[v._v("http://xxx")]),v._v(" 时，流量便会被按照一定的规则分配到 "),t("code",[v._v("upstream")]),v._v(" 中的 3 台服务器上")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("http {\n    upstream xxx {\n        server 1.1.1.1:3001;\n        server 2.2.2.2:3001;\n        server 3.3.3.3:3001;\n    }\n    server {\n        listen 8080;\n        location / {\n            proxy_pass http://xxx;\n        }\n    }\n}\n")])])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("分配策略")])]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("服务器权重( "),t("code",[v._v("weight")]),v._v(" )")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("可以为每台服务器配置访问权重，传入参数 weight，例如")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("upstream xxx {\n    server 1.1.1.1:3001 weight=1;\n    server 2.2.2.2:3001 weight=1;\n    server 3.3.3.3:3001 weight=8;\n}\n")])])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("时间顺序(默认)")]),v._v(": 按用户的访问的顺序逐一的分配到正常运行的服务器上")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("连接数优先("),t("code",[v._v("least_conn")]),v._v(")")]),v._v(": 优先将访问分配到列表中连接数队列最短的服务器上")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("响应时间优先("),t("code",[v._v("fair")]),v._v(")")]),v._v(": 优先将访问分配到列表中访问响应时间最短的服务器上")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("ip_hash")]),v._v(": 通过 ip_hash 指定，使每个 ip 用户都访问固定的服务器上，有利于用户特异性数据的缓存，例如本地 session 服务等")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("url_hash")]),v._v(": 通过 url_hash 指定，使每个 url 都分配到固定的服务器上，有利于缓存")])])])])]),v._v(" "),t("h2",{attrs:{id:"nginx-对于前端的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-对于前端的作用"}},[v._v("#")]),v._v(" Nginx 对于前端的作用")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("快速配置静态服务器")]),v._v("，当访问 "),t("code",[v._v("localhost:80")]),v._v(" 时，就会默认访问到 "),t("code",[v._v("/Users/files/index.html")])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("server {\n  listen 80;\n  server_name localhost;\n\n  location / {\n    root   /Users/files;\n    index  index.html;\n  }\n}\n")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("访问限制")]),v._v(": 可以制定一系列的规则进行访问的控制，例如直接通过 ip 限制")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("# 屏蔽 192.168.1.1 的访问；\n# 允许 192.168.1.2 ~ 10 的访问；\nlocation / {\n    deny  192.168.1.1;\n    allow 192.168.1.2/10;\n    deny  all;\n}\n")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("解决跨域")]),v._v(": 其实跨域是 "),t("strong",[v._v("浏览器的安全策略")]),v._v("，这意味着只要不是通过浏览器，就可以绕开跨域的问题。所以只要通过在同域下启动一个 Nginx 服务，转发请求即可")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("location ^~/api/ {\n  # 重写请求并代理到对应域名下\n    rewrite ^/api/(.*)$ /$1 break;\n    proxy_pass https://www.cross-target.com/;\n}\n")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("图片处理")]),v._v(": 通过 ngx_http_image_filter_module 这个模块，可以作为一层图片服务器的代理，在访问的时候 对图片进行特定的操作，例如裁剪，旋转，压缩等")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("本地代理，绕过白名单限制")]),v._v(": 例如我们在接入一些第三方服务时经常会有一些域名白名单的限制，如果我们在本地通过 "),t("code",[v._v("localhost")]),v._v(" 进行开发，便无法完成功能。这里我们可以做一层本地代理，便可以直接通过指定域名访问本地开发环境")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("server {\n  listen 80;\n  server_name www.toutiao.com;\n\n  location / {\n      proxy_pass http://localhost:3000;\n  }\n}\n")])])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);