(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{413:function(t,s,a){"use strict";a.r(s);var n=a(52),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"原理简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理简述"}},[t._v("#")]),t._v(" 原理简述")]),t._v(" "),a("p",[t._v("Webpack 已经成为了现在前端工程化中最重要的一环，通过 "),a("code",[t._v("Webpack")]),t._v(" 与 "),a("code",[t._v("Node")]),t._v(" 的配合，前端领域完成了不可思议的进步。通过预编译，将软件编程中先进的思想和理念能够真正运用于生产，让前端开发领域告别原始的蛮荒阶段。深入理解 "),a("code",[t._v("Webpack")]),t._v("，可以让你在编程思维及技术领域上产生质的成长，极大拓展技术边界。这也是在面试中必不可少的一个内容。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("核心概念")])]),t._v(" "),a("p",[t._v("JavaScript 的 "),a("strong",[t._v("模块打包工具")]),t._v(" (module bundler)。通过分析模块之间的依赖，最终将所有模块打包成一份或者多份代码包 (bundler)，供 HTML 直接引用。实质上，Webpack 仅仅提供了 "),a("strong",[t._v("打包功能")]),t._v(" 和一套 "),a("strong",[t._v("文件处理机制")]),t._v("，然后通过生态中的各种 Loader 和 Plugin 对代码进行预编译和打包。因此 Webpack 具有高度的可拓展性，能更好的发挥社区生态的力量。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Entry")]),t._v(": 入口文件，Webpack 会从该文件开始进行分析与编译。")]),t._v(" "),a("li",[a("strong",[t._v("Output")]),t._v(": 出口路径，打包后创建 bundler 的文件路径以及文件名。")]),t._v(" "),a("li",[a("strong",[t._v("Module")]),t._v(": 模块，在 Webpack 中任何文件都可以作为一个模块，会根据配置的不同的 Loader 进行加载和打包。")]),t._v(" "),a("li",[a("strong",[t._v("Chunk")]),t._v(": 代码块，可以根据配置，将所有模块代码合并成一个或多个代码块，以便按需加载，提高性能。")]),t._v(" "),a("li",[a("strong",[t._v("Loader")]),t._v(": 模块加载器，进行各种文件类型的加载与转换。")]),t._v(" "),a("li",[a("strong",[t._v("Plugin")]),t._v(": 拓展插件，可以通过 Webpack 相应的事件钩子，介入到打包过程中的任意环节，从而对代码按需修改。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("工作流程")]),t._v(" (初始化 - 编译 - 输出)")]),t._v(" "),a("ol",[a("li",[t._v("读取配置文件，按命令 "),a("strong",[t._v("初始化")]),t._v(" 配置参数，创建 Compiler 对象。")]),t._v(" "),a("li",[t._v("调用插件的 apply 方法 "),a("strong",[t._v("挂载插件")]),t._v(" 监听，然后从入口文件开始执行编译。")]),t._v(" "),a("li",[t._v("按文件类型，调用相应的 Loader 对模块进行 "),a("strong",[t._v("编译")]),t._v("，并在合适的时机点触发对应的事件，调用 Plugin 执行，最后再根据模块 "),a("strong",[t._v("依赖查找")]),t._v(" 到所依赖的模块，递归执行第三步。")]),t._v(" "),a("li",[t._v("将编译后的所有代码包装成一个个代码块 (Chuck)， 并按依赖和配置确定 "),a("strong",[t._v("输出内容")]),t._v("。这个步骤，仍然可以通过 Plugin 进行文件的修改。")]),t._v(" "),a("li",[t._v("最后，根据 Output 把文件内容一一写入到指定的文件夹中，完成整个过程。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("模块包装")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("modules")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟 require 函数，从内存中加载模块；")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("moduleId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存模块")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedModules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" installedModules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" module "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedModules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" moduleId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("l")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("exports")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行代码；")]),t._v("\n    modules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      __webpack_require__\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Flag: 标记是否加载完成；")]),t._v("\n    module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始执行加载入口文件；")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__webpack_require__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'./src/index.js'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    __webpack_exports__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    __webpack_require__")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 eval 执行编译后的代码；")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继续递归引用模块内部依赖；")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际情况并不是使用模板字符串，这里是为了代码的可读性；")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n\t\t\t__webpack_require__.r(__webpack_exports__);\n\t\t\t//\n\t\t\tvar _test__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("test", ./src/test.js");\n\t\t')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'./src/test.js'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __webpack_exports__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __webpack_require__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("strong",[t._v("总结")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("模块机制")]),t._v(": webpack 自己实现了一套模拟模块的机制，将其包裹于业务代码的外部，从而提供了一套模块机制.")]),t._v(" "),a("li",[a("strong",[t._v("文件编译")]),t._v(": webpack 规定了一套编译规则，通过 Loader 和 Plugin，以管道的形式对文件字符串进行处理.")])])])]),t._v(" "),a("h2",{attrs:{id:"loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[t._v("#")]),t._v(" Loader")]),t._v(" "),a("p",[t._v("于 Webpack 是基于 Node，因此 Webpack 其实是只能识别 js 模块，比如 css / html / 图片等类型的文件并无法加载，因此就需要一个对 "),a("strong",[t._v("不同格式文件转换器")]),t._v("。其实 Loader 做的事，也并不难理解: "),a("strong",[t._v("对 Webpack 传入的字符串进行按需修改")]),t._v("。例如一个最简单的 Loader:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// html-loader/index.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("htmlSource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回处理后的代码字符串")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除 html 文件中的所有注释")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" htmlSource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\x3c!--[\\w\\W]*?--\x3e")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当然，实际的 Loader 不会这么简单，通常是需要将代码进行分析，构建 "),a("strong",[t._v("AST (抽象语法树)")]),t._v("， 遍历进行定向的修改后，再重新生成新的代码字符串。如我们常用的 Babel-loader 会执行以下步骤:")]),t._v(" "),a("ul",[a("li",[t._v("babylon 将 ES6/ES7 代码解析成 AST")]),t._v(" "),a("li",[t._v("babel-traverse 对 AST 进行遍历转译，得到新的 AST")]),t._v(" "),a("li",[t._v("新 AST 通过 babel-generator 转换成 ES5")])]),t._v(" "),a("h4",{attrs:{id:"loader-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader-特性"}},[t._v("#")]),t._v(" Loader 特性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("链式传递")]),t._v("，按照配置时相反的顺序链式执行。")]),t._v(" "),a("li",[t._v("基于 Node 环境，拥有 "),a("strong",[t._v("较高权限")]),t._v("，比如文件的增删查改。")]),t._v(" "),a("li",[t._v("可同步也可异步。")])]),t._v(" "),a("h4",{attrs:{id:"常用-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-loader"}},[t._v("#")]),t._v(" 常用 Loader")]),t._v(" "),a("ul",[a("li",[t._v("file-loader: 加载文件资源，如 字体 / 图片 等，具有移动/复制/命名等功能。")]),t._v(" "),a("li",[t._v("url-loader: 通常用于加载图片，可以将小图片直接转换为 Date Url，减少请求。")]),t._v(" "),a("li",[t._v("babel-loader: 加载 js / jsx 文件， 将 ES6 / ES7 代码转换成 ES5，抹平兼容性问题。")]),t._v(" "),a("li",[t._v("ts-loader: 加载 ts / tsx 文件，编译 TypeScript。")]),t._v(" "),a("li",[t._v("style-loader: 将 css 代码以 "),a("code",[t._v("<style>")]),t._v(" 标签的形式插入到 html 中。")]),t._v(" "),a("li",[t._v("css-loader: 分析 "),a("code",[t._v("@import")]),t._v(" 和 "),a("code",[t._v("url()")]),t._v("，引用 css 文件与对应的资源。")]),t._v(" "),a("li",[t._v("postcss-loader: 用于 css 的兼容性处理，具有众多功能，例如 "),a("strong",[t._v("添加前缀")]),t._v("、"),a("strong",[t._v("单位转换")]),t._v(" 等。")]),t._v(" "),a("li",[t._v("less-loader / sass-loader: css 预处理器，在 css 中新增了许多语法，提高了开发效率。")])]),t._v(" "),a("h4",{attrs:{id:"编写原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写原则"}},[t._v("#")]),t._v(" 编写原则")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("单一原则")]),t._v(": 每个 Loader 只做一件事。")]),t._v(" "),a("li",[a("strong",[t._v("链式调用")]),t._v(": Webpack 会按顺序链式调用每个 Loader。")]),t._v(" "),a("li",[a("strong",[t._v("统一原则")]),t._v(": 遵循 Webpack 制定的设计规则和结构，输入与输出均为字符串，各个 Loader 完全独立，即插即用。")])]),t._v(" "),a("h2",{attrs:{id:"plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[t._v("#")]),t._v(" Plugin")]),t._v(" "),a("p",[t._v("插件系统是 Webpack 成功的一个关键性因素。在编译的整个生命周期中，Webpack 会触发许多事件钩子，Plugin 可以监听这些事件，根据需求在相应的时间点对打包内容进行定向的修改。")]),t._v(" "),a("p",[t._v("一个最简单的 plugin 是这样的:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Plugin")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册插件时，会调用 apply 方法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// apply 方法接收 compiler 对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 compiler 上提供的 Api，可以对事件进行监听，执行相应的操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compiler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compilation 是监听每次编译循环")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次文件变化，都会生成新的 compilation 对象并触发该事件")]),t._v("\n    compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'compilation'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compilation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"注册插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册插件"}},[t._v("#")]),t._v(" 注册插件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack.config.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("plugins")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"事件流机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件流机制"}},[t._v("#")]),t._v(" 事件流机制")]),t._v(" "),a("p",[t._v("Webpack 就像工厂中的一条产品流水线。原材料经过 Loader 与 Plugin 的一道道处理，最后输出结果。")]),t._v(" "),a("ul",[a("li",[t._v("通过链式调用，按顺序串起一个个 Loader。")]),t._v(" "),a("li",[t._v("通过事件流机制，让 Plugin 可以插入到整个生产过程中的每个步骤中。")])]),t._v(" "),a("p",[t._v("Webpack 事件流编程范式的核心是基础类 "),a("strong",[t._v("Tapable")]),t._v("，是一种 "),a("strong",[t._v("观察者模式")]),t._v(" 的实现事件的订阅与广播：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" SyncHook "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tapable'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SyncHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 订阅")]),t._v("\nhook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'event'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'event-hook'")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 广播")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'event-hook'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Webpack 中两个最重要的类 Compiler 与 Compilation 便是继承于 Tapable，也拥有这样的事件流机制。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Compiler")]),t._v(": 可以简单的理解为 "),a("strong",[t._v("Webpack 实例")]),t._v("，它包含了当前 Webpack 中的所有配置信息，如 options， loaders, plugins 等信息，全局唯一，只在启动时完成初始化创建，随着生命周期逐一传递。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Compilation")]),t._v(": 可以称为 "),a("strong",[t._v("编译实例")]),t._v("。当监听到文件发生改变时，Webpack 会创建一个新的 Compilation 对象，开始一次新的编译。它包含了当前的输入资源，输出资源，变化的文件等，同时通过它提供的 api，可以监听每次编译过程中触发的事件钩子。")])])]),t._v(" "),a("p",[t._v("区别在于 Compiler 全局唯一，且从启动生存到结束；Compilation 对应每次编译，每轮编译循环均会重新创建。")]),t._v(" "),a("h4",{attrs:{id:"常用-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-plugin"}},[t._v("#")]),t._v(" 常用 Plugin")]),t._v(" "),a("ul",[a("li",[t._v("UglifyJsPlugin: 压缩、混淆代码")]),t._v(" "),a("li",[t._v("CommonsChunkPlugin: 代码分割")]),t._v(" "),a("li",[t._v("ProvidePlugin: 自动加载模块")]),t._v(" "),a("li",[t._v("html-webpack-plugin: 加载 html 文件，并引入 css / js 文件")]),t._v(" "),a("li",[t._v("extract-text-webpack-plugin / mini-css-extract-plugin: 抽离样式，生成 css 文件")]),t._v(" "),a("li",[t._v("DefinePlugin: 定义全局变量")]),t._v(" "),a("li",[t._v("optimize-css-assets-webpack-plugin: CSS 代码去重")]),t._v(" "),a("li",[t._v("webpack-bundle-analyzer: 代码分析")]),t._v(" "),a("li",[t._v("compression-webpack-plugin: 使用 gzip 压缩 js 和 css")]),t._v(" "),a("li",[t._v("happypack: 使用多进程，加速代码构建")]),t._v(" "),a("li",[t._v("EnvironmentPlugin: 定义环境变量")])]),t._v(" "),a("h2",{attrs:{id:"编译优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译优化"}},[t._v("#")]),t._v(" 编译优化")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("代码优化")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("无用代码消除")]),t._v("，是许多编程语言都具有的优化手段，这个过程称为 DCE (dead code elimination)，即 "),a("strong",[t._v("删除不可能执行的代码")])]),t._v(" "),a("ul",[a("li",[t._v("例如我们的 UglifyJs，它就会帮我们在生产环境中删除不可能被执行的代码。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("摇树优化")]),t._v(' (Tree-shaking)，这是一种形象比喻。我们把打包后的代码比喻成一棵树，这里其实表示的就是，通过工具 "摇" 我们打包后的 js 代码，将没有使用到的无用代码 "摇" 下来 (删除)。即 消除那些被 '),a("strong",[t._v("引用了但未被使用")]),t._v(" 的模块代码。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原理")]),t._v(": 由于是在编译时优化，因此最基本的前提就是语法的静态分析，"),a("strong",[t._v("ES6 的模块机制")]),t._v(" 提供了这种可能性。不需要运行时，便可进行代码字面上的静态分析，确定相应的依赖关系。")]),t._v(" "),a("li",[a("strong",[t._v("问题")]),t._v(": 具有 副作用 的函数无法被 tree-shaking。\n"),a("ul",[a("li",[t._v("在引用一些第三方库，需要去观察其引入的代码量是不是符合预期。")]),t._v(" "),a("li",[t._v("尽量写纯函数，减少函数的副作用。")]),t._v(" "),a("li",[t._v("可使用 webpack-deep-scope-plugin，可以进行作用域分析，减少此类情况的发生，但仍需要注意。")])])])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("code-spliting")]),t._v(": "),a("strong",[t._v("代码分割")]),t._v(" 技术，将代码分割成多份进行 "),a("strong",[t._v("懒加载")]),t._v(" 或 "),a("strong",[t._v("异步加载")]),t._v("，避免打包成一份后导致体积过大，影响页面的首屏加载。")]),t._v(" "),a("ul",[a("li",[t._v("Webpack 中使用 SplitChunksPlugin 进行拆分。")]),t._v(" "),a("li",[t._v("按 "),a("strong",[t._v("页面")]),t._v(" 拆分: 不同页面打包成不同的文件。")]),t._v(" "),a("li",[t._v("按 "),a("strong",[t._v("功能")]),t._v(" 拆分：\n"),a("ul",[a("li",[t._v("将类似于播放器，计算库等大模块进行拆分后再懒加载引入。")]),t._v(" "),a("li",[t._v("提取复用的业务代码，减少冗余代码。")])])]),t._v(" "),a("li",[t._v("按 "),a("strong",[t._v("文件修改频率")]),t._v(" 拆分: 将第三方库等不常修改的代码单独打包，而且不改变其文件 hash 值，能最大化运用浏览器的缓存。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("scope hoisting: 作用域提升")]),t._v("，将分散的模块划分到同一个作用域中，避免了代码的重复引入，有效减少打包后的代码体积和运行时的内存损耗。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("编译性能优化:")])]),t._v(" "),a("ul",[a("li",[t._v("升级至 "),a("strong",[t._v("最新")]),t._v(" 版本的 webpack，能有效提升编译性能。")]),t._v(" "),a("li",[t._v("使用 "),a("strong",[t._v("dev-server / 模块热替换 (HMR)")]),t._v(" 提升开发体验。\n"),a("ul",[a("li",[t._v("监听文件变动 "),a("strong",[t._v("忽略 node_modules")]),t._v(" 目录能有效提高监听时的编译效率。")])])]),t._v(" "),a("li",[a("strong",[t._v("缩小编译范围")]),t._v(" "),a("ul",[a("li",[t._v("modules: 指定模块路径，减少递归搜索。")]),t._v(" "),a("li",[t._v("mainFields: 指定入口文件描述字段，减少搜索。")]),t._v(" "),a("li",[t._v("noParse: 避免对非模块化文件的加载。")]),t._v(" "),a("li",[t._v("includes/exclude: 指定搜索范围/排除不必要的搜索范围。")]),t._v(" "),a("li",[t._v("alias: 缓存目录，避免重复寻址。")])])]),t._v(" "),a("li",[a("code",[t._v("babel-loader")]),t._v(" "),a("ul",[a("li",[t._v("忽略 "),a("code",[t._v("node_moudles")]),t._v("，避免编译第三方库中已经被编译过的代码。")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("cacheDirectory")]),t._v("，可以缓存编译结果，避免多次重复编译。")])])]),t._v(" "),a("li",[a("strong",[t._v("多进程并发")]),t._v(" "),a("ul",[a("li",[t._v("webpack-parallel-uglify-plugin: 可多进程并发压缩 js 文件，提高压缩速度。")]),t._v(" "),a("li",[t._v("HappyPack: 多进程并发文件的 Loader 解析。")])])]),t._v(" "),a("li",[a("strong",[t._v("第三方库模块缓存")]),t._v(" "),a("ul",[a("li",[t._v("DLLPlugin 和 DLLReferencePlugin 可以提前进行打包并缓存，避免每次都重新编译。")])])]),t._v(" "),a("li",[a("strong",[t._v("使用分析")]),t._v(" "),a("ul",[a("li",[t._v("Webpack Analyse / webpack-bundle-analyzer 对打包后的文件进行分析，寻找可优化的地方。")]),t._v(" "),a("li",[t._v("配置 "),a("code",[t._v("profile：true")]),t._v(" ，对各个编译阶段耗时进行监控，寻找耗时最多的地方。")])])]),t._v(" "),a("li",[a("code",[t._v("source-map")]),t._v(" "),a("ul",[a("li",[t._v("开发: "),a("code",[t._v("cheap-module-eval-source-map")])]),t._v(" "),a("li",[t._v("生产: "),a("code",[t._v("hidden-source-map")])])])])])])]),t._v(" "),a("h2",{attrs:{id:"性能优化思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化思路"}},[t._v("#")]),t._v(" 性能优化思路")]),t._v(" "),a("p",[t._v("对于正常的项目优化，一般都涉及到几个方面，"),a("strong",[t._v("开发过程中")]),t._v("、"),a("strong",[t._v("上线之后的首屏")]),t._v("、"),a("strong",[t._v("运行过程的状态")])]),t._v(" "),a("ul",[a("li",[t._v("开发过程和打包\n"),a("ul",[a("li",[t._v("分析打包速度\n"),a("ul",[a("li",[a("code",[t._v("speed-measure-webpack-plugin")])])])]),t._v(" "),a("li",[t._v("分析影响打包速度环节\n"),a("ul",[a("li",[t._v("获取依赖模块（搜索时间）")]),t._v(" "),a("li",[t._v("解析依赖模块（解析时间）")]),t._v(" "),a("li",[t._v("依赖模块的打包（压缩时间）")]),t._v(" "),a("li",[t._v("运行时的修改（二次打包时间）")])])]),t._v(" "),a("li",[t._v("优化解析时间 - 开启多进程打包\n"),a("ul",[a("li",[a("code",[t._v("thread-loader")])]),t._v(" "),a("li",[a("code",[t._v("HappyPack")])])])]),t._v(" "),a("li",[t._v("合理利用缓存（缩短连续构建时间，增加初始构建时间）\n"),a("ul",[a("li",[a("code",[t._v("cache-loader")])]),t._v(" "),a("li",[a("code",[t._v("HardSourceWebpackPlugin")])])])]),t._v(" "),a("li",[t._v("优化压缩时间\n"),a("ul",[a("li",[t._v("webpack3\n"),a("ul",[a("li",[t._v("启动打包时加上 "),a("code",[t._v("--optimize-minimize")]),t._v("("),a("code",[t._v("UglifyJsPlugin")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("ParallelUglifyPlugin")])])])]),t._v(" "),a("li",[t._v("webpack4\n"),a("ul",[a("li",[t._v("webpack4 默认内置使用 "),a("code",[t._v("terser-webpack-plugin")]),t._v(" 插件压缩优化代码, "),a("code",[t._v("terser")]),t._v(" 启动多进程。")])])])])]),t._v(" "),a("li",[t._v("优化搜索时间- 缩小文件搜索范围\n"),a("ul",[a("li",[t._v("loader 的 "),a("code",[t._v("test")]),t._v("，"),a("code",[t._v("include")]),t._v("，"),a("code",[t._v("exclude")])]),t._v(" "),a("li",[t._v("resolve.modules")]),t._v(" "),a("li",[t._v("resolve.alias 减少耗时的递归解析操作")]),t._v(" "),a("li",[t._v("resolve.extensions （提高命中导入语句文件后缀）")]),t._v(" "),a("li",[t._v("resolve.mainFields")]),t._v(" "),a("li",[t._v("module.noParse")])])])])]),t._v(" "),a("li",[t._v("上线之后的首屏\n"),a("ul",[a("li",[t._v("首屏优化一般涉及到几个指标 FP、FCP、FMP；要有一个良好的体验是尽可能的把 FCP 提前，需要做一些工程化的处理，去优化资源的加载")]),t._v(" "),a("li",[t._v("方式及分包策略，资源的减少是最有效的加快首屏打开的方式")]),t._v(" "),a("li",[t._v("骨架屏及预渲染（部分结构预渲染）、suspence 与 lazy 做懒加载动态组件的方式")]),t._v(" "),a("li",[t._v("SSR 对于 SEO 和首屏的优化有一定的优势")])])]),t._v(" "),a("li",[t._v("运行状态\n"),a("ul",[a("li",[t._v("react 项目上线之后，首先需要保障的是可用性，所以可以通过 React.Profiler 分析组件的渲染次数及耗时的一些任务，但是 Profile 记录的是 commit 阶段的数据，所以对于 react 的调和阶段就需要结合 performance API 一起分析")]),t._v(" "),a("li",[t._v("由于 React 是父级 props 改变之后，所有与 props 不相关子组件在没有添加条件控制的情况之下，也会触发 render 渲染，这是没有必要的，可以结合 React 的 PureComponent 以及 React.memo 等做浅比较处理，这中间有涉及到不可变数据的处理，当然也可以结合使用 ShouldComponentUpdate 做深比较处理")]),t._v(" "),a("li",[t._v("所有的运行状态优化，都是减少不必要的 render，React.useMemo 与 React.useCallback 也是可以做很多优化的地方")]),t._v(" "),a("li",[t._v("在很多应用中，都会涉及到使用 redux 以及使用 context，这两个都可能造成许多不必要的 render，所以在使用的时候，也需要谨慎的处理一些数据")]),t._v(" "),a("li",[t._v("最后就是保证整个应用的可用性，为组件创建错误边界，可以使用 componentDidCatch 来处理")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);