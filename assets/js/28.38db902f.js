(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{415:function(e,v,_){"use strict";_.r(v);var t=_(52),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),_("p",[_("code",[e._v("视图模型双向绑定（Model-View-ViewModel）")]),e._v(",也就是把 "),_("code",[e._v("MVC")]),e._v(" 中的 "),_("code",[e._v("Controller")]),e._v(" 演变成 "),_("code",[e._v("ViewModel")]),e._v("。"),_("code",[e._v("Model")]),e._v("层代表数据模型，"),_("code",[e._v("View")]),e._v("代表 UI 组件，"),_("code",[e._v("ViewModel")]),e._v(" 是 "),_("code",[e._v("View")]),e._v(" 和 "),_("code",[e._v("Model")]),e._v(" 的桥梁，数据会绑定到 "),_("code",[e._v("ViewModel")]),e._v(" 层并自动将数据渲染到页面中。视图变化的时候会通知 "),_("code",[e._v("ViewModel")]),e._v(" 层更新数据。以前是操作 DOM 结构更新视图，现在是 "),_("code",[e._v("数据驱动视图")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"nexttick"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nexttick"}},[e._v("#")]),e._v(" nextTick")]),e._v(" "),_("p",[e._v("在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。\nVue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启 1 个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。")]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),_("p",[e._v("nextTick 主要使用了宏任务和微任务。 根据执行环境分别尝试采用 "),_("code",[e._v("Promise")]),e._v("、"),_("code",[e._v("MutationObserver")]),e._v("、"),_("code",[e._v("setImmediate")]),e._v("，如果以上都不行则采用 "),_("code",[e._v("setTimeout")]),e._v(" 定义了一个异步方法，多次调用 nextTick 会将方法存入队列中，通过这个异步方法清空当前队列。")])]),e._v(" "),_("h2",{attrs:{id:"keep-alive-的实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-的实现"}},[e._v("#")]),e._v(" keep-alive 的实现")]),e._v(" "),_("ul",[_("li",[e._v("作用： 实现组件的缓存，保持组件的状态，以避免反复渲染导致的性能问题。需要缓存组件频繁切换，不需要重复渲染，如：tabs 标签页。")]),e._v(" "),_("li",[e._v("原理： "),_("code",[e._v("keep-alive")]),e._v(" 是一个通用组件，它内部定义了一个 "),_("code",[e._v("map")]),e._v(" ，缓存创建过的组件实例，它返回的渲染函数内部会查找内嵌的 "),_("code",[e._v("component")]),e._v(" 组件对应组件的 "),_("code",[e._v("vnode")]),e._v(" ，如果该组件在 "),_("code",[e._v("map")]),e._v(" 中存在就直接返回它。由于 "),_("code",[e._v("component")]),e._v(" 的 "),_("code",[e._v("is")]),e._v(" 属性是个响应式数据，因此只要它变化，"),_("code",[e._v("keep-alive")]),e._v(" 的 "),_("code",[e._v("render")]),e._v(" 函数就会重新执行。")])]),e._v(" "),_("h2",{attrs:{id:"生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("_init_")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("initLifecycle")]),e._v("/"),_("code",[e._v("Event")]),e._v("，往 vm 上挂载各种属性")]),e._v(" "),_("li",[_("code",[e._v("callHook")]),e._v(": "),_("code",[e._v("beforeCreated")]),e._v(": 实例刚创建")]),e._v(" "),_("li",[_("code",[e._v("initInjection")]),e._v("/"),_("code",[e._v("initState")]),e._v(": 初始化注入和 "),_("code",[e._v("data")]),e._v(" 响应性")]),e._v(" "),_("li",[_("code",[e._v("created")]),e._v(": 创建完成，属性已经绑定， 但还未生成真实 "),_("code",[e._v("dom")])]),e._v(" "),_("li",[e._v("进行元素的挂载： "),_("code",[e._v("$el")]),e._v(" / "),_("code",[e._v("vm.$mount()")])]),e._v(" "),_("li",[e._v("是否有 "),_("code",[e._v("template")]),e._v(": 解析成 "),_("code",[e._v("render function")]),e._v(" "),_("ul",[_("li",[_("code",[e._v(".vue")]),e._v(" 文件: "),_("code",[e._v("vue-loader")]),e._v(" 会将"),_("code",[e._v("<template>")]),e._v("编译成 "),_("code",[e._v("render function")])])])]),e._v(" "),_("li",[_("code",[e._v("beforeMount")]),e._v(": 模板编译/挂载之前")]),e._v(" "),_("li",[e._v("执行 "),_("code",[e._v("render function")]),e._v("，生成真实的 "),_("code",[e._v("dom")]),e._v("，并替换到 "),_("code",[e._v("dom tree")]),e._v(" 中")]),e._v(" "),_("li",[_("code",[e._v("mounted")]),e._v(": 组件已挂载")])])]),e._v(" "),_("li",[_("code",[e._v("update")]),e._v(" "),_("ul",[_("li",[e._v("执行 "),_("code",[e._v("diff")]),e._v(" 算法，比对改变是否需要触发 UI 更新")]),e._v(" "),_("li",[_("code",[e._v("flushScheduleQueue")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("watcher.before")]),e._v(": 触发 "),_("code",[e._v("beforeUpdate")]),e._v(" 钩子 - "),_("code",[e._v("watcher.run()")]),e._v(": 执行 "),_("code",[e._v("watcher")]),e._v(" 中的 "),_("code",[e._v("notify")]),e._v("，通知所有依赖项更新 UI")])])]),e._v(" "),_("li",[e._v("触发 "),_("code",[e._v("updated")]),e._v(" 钩子: 组件已更新")])])]),e._v(" "),_("li",[_("code",[e._v("actived")]),e._v(" / "),_("code",[e._v("deactivated(keep-alive)")]),e._v(" : 不销毁，缓存，组件激活与失活")]),e._v(" "),_("li",[_("code",[e._v("destroy")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("beforeDestroy")]),e._v(": 销毁开始")]),e._v(" "),_("li",[e._v("销毁自身且递归销毁子组件以及事件监听\n"),_("ul",[_("li",[_("code",[e._v("remove()")]),e._v(": 删除节点")]),e._v(" "),_("li",[_("code",[e._v("watcher.teardown()")]),e._v(": 清空依赖")]),e._v(" "),_("li",[_("code",[e._v("vm.$off()")]),e._v(": 解绑监听")])])]),e._v(" "),_("li",[_("code",[e._v("destroyed")]),e._v(": 完成后触发钩子")])])])]),e._v(" "),_("h2",{attrs:{id:"数据响应-数据劫持"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据响应-数据劫持"}},[e._v("#")]),e._v(" 数据响应(数据劫持)")]),e._v(" "),_("p",[e._v("数据响应的实现由两部分构成: "),_("strong",[e._v("观察者( watcher )")]),e._v(" 和 "),_("strong",[e._v("依赖收集器( Dep )")]),e._v("，其核心是 "),_("code",[e._v("defineProperty")]),e._v(" 这个方法，它可以 "),_("strong",[e._v("重写属性的 get 与 set 方法")]),e._v("，从而完成监听数据的改变。")]),e._v(" "),_("ul",[_("li",[e._v("Observe (观察者)观察 "),_("code",[e._v("props")]),e._v(" 与 "),_("code",[e._v("state")]),e._v(" "),_("ul",[_("li",[e._v("遍历 "),_("code",[e._v("props")]),e._v(" 与 "),_("code",[e._v("state")]),e._v("，对每个属性创建独立的监听器( watcher )")])])]),e._v(" "),_("li",[e._v("使用 "),_("code",[e._v("defineProperty")]),e._v(" 重写每个属性的 get/set("),_("code",[e._v("defineReactive")]),e._v("）\n"),_("ul",[_("li",[_("code",[e._v("get")]),e._v(": 收集依赖\n"),_("ul",[_("li",[_("code",[e._v("Dep.depend()")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("watcher.addDep()")])])])])])]),e._v(" "),_("li",[_("code",[e._v("set")]),e._v(": 派发更新\n"),_("ul",[_("li",[_("code",[e._v("Dep.notify()")])]),e._v(" "),_("li",[_("code",[e._v("watcher.update()")])]),e._v(" "),_("li",[_("code",[e._v("queenWatcher()")])]),e._v(" "),_("li",[_("code",[e._v("nextTick")])]),e._v(" "),_("li",[_("code",[e._v("flushScheduleQueue")])]),e._v(" "),_("li",[_("code",[e._v("watcher.run()")])]),e._v(" "),_("li",[_("code",[e._v("updateComponent()")])])])])])])]),e._v(" "),_("h2",{attrs:{id:"virtual-dom-原理实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom-原理实现"}},[e._v("#")]),e._v(" virtual dom 原理实现")]),e._v(" "),_("ul",[_("li",[e._v("创建 dom 树")]),e._v(" "),_("li",[e._v("树的 "),_("code",[e._v("diff")]),e._v("，同层对比\n"),_("ul",[_("li",[e._v("没有新的节点，返回")]),e._v(" "),_("li",[e._v("新的节点 "),_("code",[e._v("tagName")]),e._v(" 与 "),_("code",[e._v("key")]),e._v(" 不变， 对比 "),_("code",[e._v("props")]),e._v("，继续递归遍历子树\n"),_("ul",[_("li",[e._v("对比属性(对比新旧属性列表):\n"),_("ul",[_("li",[e._v("旧属性是否存在与新属性列表中")]),e._v(" "),_("li",[e._v("都存在的是否有变化")]),e._v(" "),_("li",[e._v("是否出现旧列表中没有的新属性")])])]),e._v(" "),_("li",[_("code",[e._v("tagName")]),e._v(" 和 "),_("code",[e._v("key")]),e._v(" 值变化了，则直接替换成新节点")])])])])]),e._v(" "),_("li",[e._v("渲染差异\n"),_("ul",[_("li",[e._v("遍历 "),_("code",[e._v("patch")]),e._v("， 把需要更改的节点取出来")]),e._v(" "),_("li",[e._v("局部更新 "),_("code",[e._v("dom")])])])])]),e._v(" "),_("h2",{attrs:{id:"proxy-相比于-defineproperty-的优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#proxy-相比于-defineproperty-的优势"}},[e._v("#")]),e._v(" Proxy 相比于 defineProperty 的优势")]),e._v(" "),_("ul",[_("li",[e._v("数组变化也能监听到")]),e._v(" "),_("li",[e._v("不需要深度遍历监听")])]),e._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" data "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("a")]),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" reactiveData "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Proxy")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("data"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),_("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("get")]),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("target"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),_("h2",{attrs:{id:"vue-router"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[e._v("#")]),e._v(" vue-router")]),e._v(" "),_("ul",[_("li",[e._v("mode\n"),_("ul",[_("li",[_("code",[e._v("hash")]),e._v(" ： hashchange")]),e._v(" "),_("li",[_("code",[e._v("history")]),e._v(" ： popstate、pushState、replaceState")])])]),e._v(" "),_("li",[e._v("跳转\n"),_("ul",[_("li",[_("code",[e._v("this.$router.push()")])]),e._v(" "),_("li",[_("code",[e._v('<router-link to=""></router-link>')])])])]),e._v(" "),_("li",[e._v("占位\n"),_("ul",[_("li",[_("code",[e._v("<router-view></router-view>")])])])])]),e._v(" "),_("h2",{attrs:{id:"vuex"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[e._v("#")]),e._v(" vuex")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("state")]),e._v(": 状态中心")]),e._v(" "),_("li",[_("code",[e._v("mutations")]),e._v(": 更改状态")]),e._v(" "),_("li",[_("code",[e._v("actions")]),e._v(": 异步更改状态")]),e._v(" "),_("li",[_("code",[e._v("getters")]),e._v(": 获取状态")]),e._v(" "),_("li",[_("code",[e._v("modules")]),e._v(": 将 "),_("code",[e._v("state")]),e._v(" 分成多个 "),_("code",[e._v("modules")]),e._v("，便于管理")])])])}),[],!1,null,null,null);v.default=o.exports}}]);