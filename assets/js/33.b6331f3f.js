(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{419:function(v,_,t){"use strict";t.r(_);var r=t(52),s=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[t("strong",[v._v("Docker")]),v._v("，是一款现在最流行的 软件容器平台，提供了软件运行时所依赖的环境")]),v._v(" "),t("h2",{attrs:{id:"物理机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#物理机"}},[v._v("#")]),v._v(" 物理机")]),v._v(" "),t("ul",[t("li",[v._v("硬件环境，真实的 "),t("strong",[v._v("计算机实体")]),v._v("，包含了例如物理内存，硬盘等等硬件")])]),v._v(" "),t("h2",{attrs:{id:"虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机"}},[v._v("#")]),v._v(" 虚拟机")]),v._v(" "),t("ul",[t("li",[v._v("在物理机上 "),t("strong",[v._v("模拟出一套硬件环境和操作系统")]),v._v("，应用软件可以运行于其中，并且毫无感知，是一套"),t("strong",[v._v("隔离的完整环境")]),v._v("。本质上，它只是物理机上的一份 "),t("strong",[v._v("运行文件")])])]),v._v(" "),t("h2",{attrs:{id:"为什么需要虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要虚拟机"}},[v._v("#")]),v._v(" 为什么需要虚拟机？")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("环境配置与迁移")])]),v._v(" "),t("ul",[t("li",[v._v("在软件开发和运行中，环境依赖一直是一个很头疼的难题，比如你想运行 node 应用，那至少环境得安装 node 吧，而且不同版本，不同系统都会影响运行。"),t("strong",[v._v("解决的办法")]),v._v("，就是我们的包装包中直接包含运行环境的安装，让同一份环境可以快速复制到任意一台物理机上。")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("资源利用率与隔离")])]),v._v(" "),t("ul",[t("li",[v._v("通过硬件模拟，并包含一套完整的操作系统，应用可以独立运行在虚拟机中，与外界隔离。并且可以在同一台物理机上，开启多个不同的虚拟机启动服务，即一台服务器，提供多套服务，且资源完全相互隔离，互不影响。不仅能更好提高资源利用率率，降低成本，而且也有利于服务的稳定性。")])])])]),v._v(" "),t("h2",{attrs:{id:"传统虚拟机的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统虚拟机的缺点"}},[v._v("#")]),v._v(" 传统虚拟机的缺点")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("资源占用大")]),v._v(" "),t("ul",[t("li",[v._v("由于虚拟机是模拟出一套 "),t("strong",[v._v("完整系统")]),v._v("，包含众多系统级别的文件和库，运行也需要占用一部分资源，单单启动一个空的虚拟机，可能就要占用 100+MB 的内存了。")])])]),v._v(" "),t("li",[t("strong",[v._v("启动缓慢")]),v._v(" "),t("ul",[t("li",[v._v("同样是由于完整系统，在启动过程中就需要运行各种系统应用和步骤，也就是跟我们平时启动电脑一样的耗时。")])])]),v._v(" "),t("li",[t("strong",[v._v("冗余步骤多")]),v._v(" "),t("ul",[t("li",[v._v("系统有许多内置的系统操作，例如用户登录，系统检查等等，有些场景其实我们要的只是一个隔离的环境，其实也就是说，虚拟机对部分需求痛点来说，其实是有点过重的。")])])])]),v._v(" "),t("h2",{attrs:{id:"linux-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux-容器"}},[v._v("#")]),v._v(" Linux 容器")]),v._v(" "),t("ul",[t("li",[v._v("Linux 中的一项虚拟化技术，称为 Linux 容器技术(LXC)。")]),v._v(" "),t("li",[v._v("它在 "),t("strong",[v._v("进程层面")]),v._v(" 模拟出一套隔离的环境配置，但并没有模拟硬件和完整的操作系统。因此它完全规避了传统虚拟机的缺点，在启动速度，资源利用上远远优于虚拟机。")])]),v._v(" "),t("h2",{attrs:{id:"docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[v._v("#")]),v._v(" Docker")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("Docker 就是基于 Linux 容器的一种上层封装，提供了更为简单易用的 API 用于操作 Docker，属于一种 "),t("strong",[v._v("容器解决方案")]),v._v("。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("基本概念")]),v._v(": 在 Docker 中，有三个核心的概念:")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("镜像 (Image)")])]),v._v(" "),t("ul",[t("li",[v._v("从原理上说，镜像属于一种 "),t("strong",[v._v("root 文件系统")]),v._v("，包含了一些系统文件和环境配置等，可以将其理解成一套 "),t("strong",[v._v("最小操作系统")]),v._v("。为了让镜像轻量化和可移植，Docker 采用了 "),t("strong",[v._v("Union FS 的分层存储模式")]),v._v("。将文件系统分成一层一层的结构，逐步从底层往上层构建，每层文件都可以进行继承和定制。这里从前端的角度来理解: "),t("strong",[v._v("镜像就类似于代码中的 class，可以通过继承与上层封装进行复用")]),v._v("。")]),v._v(" "),t("li",[v._v("从外层系统看来，一个镜像就是一个 Image "),t("strong",[v._v("二进制文件")]),v._v("，可以任意迁移，删除，添加。")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("容器 (Container)")])]),v._v(" "),t("ul",[t("li",[v._v("镜像是一份静态文件系统，无法进行运行时操作，就如 "),t("code",[v._v("class")]),v._v("，如果我们不进行实例化时，便无法进行操作和使用。因此 "),t("strong",[v._v("容器可以理解成镜像的实例")]),v._v("，即 "),t("code",[v._v("new 镜像()")]),v._v("，这样我们便可以创建、修改、操作容器；一旦创建后，就可以简单理解成一个轻量级的操作系统，可以在内部进行各种操作，例如运行 node 应用，拉取 git 等。")]),v._v(" "),t("li",[v._v("基于镜像的分层结构，容器是 "),t("strong",[v._v("以镜像为基础底层")]),v._v("，在上面封装了一层 "),t("strong",[v._v("容器的存储层")]),v._v("。\n"),t("ul",[t("li",[v._v("存储空间的生命周期与容器一致。")]),v._v(" "),t("li",[v._v("该层存储层会随着容器的销毁而销毁。")]),v._v(" "),t("li",[v._v("尽量避免往容器层写入数据。")])])]),v._v(" "),t("li",[v._v("容器中的数据的持久化管理主要由两种方式。\n"),t("ul",[t("li",[t("strong",[v._v("数据卷 (Volume)")]),v._v(": 一种可以在多个容器间共享的特殊目录，其处于容器外层，并不会随着容器销毁而删除。")]),v._v(" "),t("li",[t("strong",[v._v("挂载主机目录")]),v._v(": 直接将一个主机目录挂载到容器中进行写入。")])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("仓库 (Repository)")])]),v._v(" "),t("ul",[t("li",[v._v("为了便于镜像的使用，Docker 提供了类似于 git 的仓库机制，在仓库中包含着各种各样版本的镜像。官方服务是 Docker Hub。")]),v._v(" "),t("li",[v._v("可以快速地从仓库中拉取各种类型的镜像，也可以基于某些镜像进行自定义，甚至发布到仓库供社区使用。")])])])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);